/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.5/userguide/custom_plugins.html in the Gradle documentation.
 */
group = "com.mendixlabs.mendix-gradle-plugin"
version = "0.0.9-SNAPSHOT"

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    alias(libs.plugins.jvm)

    id("maven-publish")
    id("com.gradle.plugin-publish") version "1.3.1"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation("org.xerial:sqlite-jdbc:3.49.1.0")
    implementation("com.google.code.gson:gson:2.13.0")
//    implementation("de.undercouch.download:de.undercouch.download.gradle.plugin:5.5.0")

    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

gradlePlugin {
    website = "https://github.com/mendixlabs/mendix-gradle-plugin"
    vcsUrl = "https://github.com/mendixlabs/mendix-gradle-plugin.git"

    val mendixGradlePlugin by plugins.creating {
        id = "com.mendixlabs.mendix-gradle-plugin"
        displayName = "Mendix Gradle Plugin"
        description = "A plugin that helps you to interact with Mendix tools in a project."
        tags = listOf("mendix", "project", "mxbuild")
        implementationClass = "mendixlabs.mendixgradleplugin.MendixGradlePlugin"
    }
}

publishing {
    repositories {
        mavenLocal()
    }
}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])
configurations["functionalTestRuntimeOnly"].extendsFrom(configurations["testRuntimeOnly"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(functionalTestSourceSet)

